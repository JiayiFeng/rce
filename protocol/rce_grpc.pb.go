// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: rce.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RemoteCodeExecutorClient is the client API for RemoteCodeExecutor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteCodeExecutorClient interface {
	Spawn(ctx context.Context, opts ...grpc.CallOption) (RemoteCodeExecutor_SpawnClient, error)
}

type remoteCodeExecutorClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteCodeExecutorClient(cc grpc.ClientConnInterface) RemoteCodeExecutorClient {
	return &remoteCodeExecutorClient{cc}
}

func (c *remoteCodeExecutorClient) Spawn(ctx context.Context, opts ...grpc.CallOption) (RemoteCodeExecutor_SpawnClient, error) {
	stream, err := c.cc.NewStream(ctx, &RemoteCodeExecutor_ServiceDesc.Streams[0], "/protocol.RemoteCodeExecutor/Spawn", opts...)
	if err != nil {
		return nil, err
	}
	x := &remoteCodeExecutorSpawnClient{stream}
	return x, nil
}

type RemoteCodeExecutor_SpawnClient interface {
	Send(*SpawnRequest) error
	Recv() (*SpawnResponse, error)
	grpc.ClientStream
}

type remoteCodeExecutorSpawnClient struct {
	grpc.ClientStream
}

func (x *remoteCodeExecutorSpawnClient) Send(m *SpawnRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *remoteCodeExecutorSpawnClient) Recv() (*SpawnResponse, error) {
	m := new(SpawnResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RemoteCodeExecutorServer is the server API for RemoteCodeExecutor service.
// All implementations must embed UnimplementedRemoteCodeExecutorServer
// for forward compatibility
type RemoteCodeExecutorServer interface {
	Spawn(RemoteCodeExecutor_SpawnServer) error
	mustEmbedUnimplementedRemoteCodeExecutorServer()
}

// UnimplementedRemoteCodeExecutorServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteCodeExecutorServer struct {
}

func (UnimplementedRemoteCodeExecutorServer) Spawn(RemoteCodeExecutor_SpawnServer) error {
	return status.Errorf(codes.Unimplemented, "method Spawn not implemented")
}
func (UnimplementedRemoteCodeExecutorServer) mustEmbedUnimplementedRemoteCodeExecutorServer() {}

// UnsafeRemoteCodeExecutorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteCodeExecutorServer will
// result in compilation errors.
type UnsafeRemoteCodeExecutorServer interface {
	mustEmbedUnimplementedRemoteCodeExecutorServer()
}

func RegisterRemoteCodeExecutorServer(s grpc.ServiceRegistrar, srv RemoteCodeExecutorServer) {
	s.RegisterService(&RemoteCodeExecutor_ServiceDesc, srv)
}

func _RemoteCodeExecutor_Spawn_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RemoteCodeExecutorServer).Spawn(&remoteCodeExecutorSpawnServer{stream})
}

type RemoteCodeExecutor_SpawnServer interface {
	Send(*SpawnResponse) error
	Recv() (*SpawnRequest, error)
	grpc.ServerStream
}

type remoteCodeExecutorSpawnServer struct {
	grpc.ServerStream
}

func (x *remoteCodeExecutorSpawnServer) Send(m *SpawnResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *remoteCodeExecutorSpawnServer) Recv() (*SpawnRequest, error) {
	m := new(SpawnRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RemoteCodeExecutor_ServiceDesc is the grpc.ServiceDesc for RemoteCodeExecutor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteCodeExecutor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.RemoteCodeExecutor",
	HandlerType: (*RemoteCodeExecutorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Spawn",
			Handler:       _RemoteCodeExecutor_Spawn_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rce.proto",
}
